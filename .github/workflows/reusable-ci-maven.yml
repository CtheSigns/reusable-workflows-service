#use https://github.com/nektos/act for local test
#workflow run Continuous Integration on the callers branch

name: Reusable CI

on:
  workflow_call:
    inputs:
      skipTests:
        required: false
        default: false
        type: boolean
        description: skip tests
      skipImage:
        required: false
        default: false
        type: boolean
        description: skip image
      imageTag:
        required: false
        type: string
        description: additional image tag besides default commit hash
    secrets:
      MAVEN_GITHUB_TOKEN:
        required: true
        description: GitHub token with permissions to read Maven GitHub packages

jobs:
  compile:
    name: compilation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '11'

      - name: Cache Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ github.repository }}-dependencies-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ github.repository }}-dependencies-

      - name: Maven dependency:go-offline
        run: mvn -s settings.xml dependency:go-offline
        env:
          GITHUB_TOKEN: ${{ secrets.MAVEN_GITHUB_TOKEN }}

      - name: Compile
        run: mvn test-compile

      - name: Cache compiled ./target
        uses: actions/cache@v3
        with:
          path: ./target
          key: ${{ github.repository }}-compiled_target-${{ github.sha }}

  test:
    name: running tests
    if: ${{ !inputs.skipTests || !inputs.skipImage }}
    needs: compile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '11'

      - name: Restore Maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ github.repository }}-dependencies-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ github.repository }}-dependencies-

      - name: Restore compiled ./target cache
        uses: actions/cache@v3
        with:
          path: ./target
          key: ${{ github.repository }}-compiled_target-${{ github.sha }}

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.7.0
        with:
          mongodb-version: '4.4'

      - name: Run tests
        run: mvn -Ddockerfile.skip=true -Dspring.profiles.active=test verify

      - name: Cache tested ./target
        uses: actions/cache@v3
        with:
          path: ./target
          key: ${{ github.repository }}-tested_target-${{ github.sha }}

  image:
    name: image build & push
    if: ${{ !inputs.skipImage }}
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Prepare ENV vars
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '11'

      - name: Restore Maven cache
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ github.repository }}-dependencies-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ github.repository }}-dependencies-

      - name: Restore tested ./target cache
        uses: actions/cache@v3
        with:
          path: ./target
          key: ${{ github.repository }}-tested_target-${{ github.sha }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Image build & push
        env:
          TAG: ${{ inputs.imageTag }}
          COMMIT_HASH: ${{ github.sha }}
        run: |

          [ -z "$TAG" ] && TAG=$COMMIT_HASH

          docker build . \
            -t ghcr.io/$REPO_NAME:$COMMIT_HASH \
            -t ghcr.io/$REPO_NAME:$TAG \
            --build-arg JAR_FILE=$IMAGE_NAME.jar

          docker push ghcr.io/$REPO_NAME --all-tags